
https://code-maze.com/aspnetcore-api-key-authentication/
Implement API Key Authentication in ASP.NET Core

https://www.camiloterevinto.com/post/simple-and-secure-api-keys-using-asp-net-core



James Bond is a fictional character created by British novelist Ian Fleming in 1953. 
A British secret agent working for MI6 under the codename 007, Bond has been portrayed 
on film in twenty-seven productions by actors Sean Connery, David Niven, George Lazenby, Roger Moore, Timothy Dalton, Pierce Brosnan and Daniel Craig. Eon Productions, which now holds the adaptation rights to all of Fleming's Bond novels, made all but two films in the film series.[1][2]

In 1961, producers Albert R. Broccoli and Harry Saltzman purchased the filming rights to 
Fleming's novels.[3] They founded Eon Productions and, with financial backing by United Artists, produced Dr. No, directed by Terence Young and featuring Connery as Bond.[4] Following its release in 1962, Broccoli and Saltzman created the holding company Danjaq to ensure future productions in the James Bond film series.[5] The Eon series currently has twenty-five films, with the most recent, No Time to Die, released in September 2021. With a combined gross of $7.8 billion to date, it is the fifth-highest-grossing film series in nominal terms.[6] Adjusting for inflation, the series has earned over $19.2 billion in 2022 dollars from box-office receipts alone,[a] with non-Eon entries pushing this inflation-adjusted figure to a grand total in excess of $20 billion.

The films have won six Academy Awards: for Sound Effects (now Sound Editing) in Goldfinger
 (at the 37th Awards), to John Stears for Visual Effects in Thunderball (at the 38th Awards),
  to Per Hallberg and Karen Baker Landers for Sound Editing, to Adele and Paul Epworth for Original 
  Song in Skyfall (at the 85th Awards), to Sam Smith and Jimmy Napes for Original Song in Spectre
   (at the 88th Awards), and to Billie Eilish and Finneas O'Connell for Original Song in No Time to 
   Die (at the 94th Awards). Several other songs produced for the films have been nominated for
    Academy Awards for Original Song, including Paul McCartney's "Live and Let Die", Carly Simon's 
	"Nobody Does It Better", and Sheena Easton's "For Your Eyes Only". In 1982, Albert R. Broccoli
	received the Irving G. Thalberg Memorial Award.[7]


	In the first film, Hunt acts as the IMF point man for an experienced 
	field team led by veteran Jim Phelps (Jon Voight), his mentor. 
	While attempting to prevent files containing information on all IMF's field
	 agents from being stolen during a mission in Prague, nearly the entire team, 
	 except Hunt, are killed, and the files are stolen. Hunt is seen as the main suspect
	  as he learns that the mission was a set-up to expose a mole who had been selling secrets
	   to an arms dealer called Max (Vanessa Redgrave); the real files are still secure at 
	   CIA headquarters in Langley. Hunt decides to steal the actual list himself for the arms
	    dealer in exchange for a meeting with the actual mole and $10,000,000 in bearer bonds
		. He recruits a team of other disavowed agents such as 
		hacker Luther Stickell (Ving Rhames), pilot Franz Krieger (Jean Reno), 
		and Jim's wife Claire (Emmanuelle BÃ©art), the only other survivor of the mission in Prague, 
		to help him break into CIA headquarters in order to steal the genuine list in exchange for an 
		introduction to the real mole, which he successfully does. Ethan later finds Jim alive and
		 deduces that he is the real mole, working with Claire and Krieger to escape with the money
		  and frame Ethan for their crimes. In a final confrontation aboard a TGV train in the Channel 
		  Tunnel, Claire is killed when she tries to protect Ethan, as Ethan clears his name by stopping 
		  Phelps and Krieger before they are able to escape with the money and by securing the list. 
		  Ethan gets Luther reinstated as an IMF agent and considers leaving the IMF, but is offered 
		  a mission of his own during the flight home.

@using System.Dynamic@using System.Reflection@using System.Text.Json
@using Blazor_EditableTable.Model
@using System.ComponentModel
@using System.Linq.Expressions@inject IJSRuntime js
@typeparam TModel


  <EditForm Model="@Model" OnValidSubmit="Save">
    @foreach (PropertyMetadata property in PropertyInfoList)
    {
            <div class="form-group">
                <label>@property.PropertyName</label>
                

               @if (property.PropertyType == "System.Int32")
                {
                    var value = Convert.ToInt32(@Model.GetType().GetProperty(property.PropertyName)?.GetValue(Model));
                 
                <InputNumber ValueExpression="ValueExpression<int>(property.PropertyName)"  
                    Value="@((int)value)"
                                 ValueChanged=@((int v)=>Change(v,property.PropertyName)) class="form-control" />
                }
                @if (property.PropertyType == "System.String")
                {
                         var value = @Model.GetType().GetProperty(property.PropertyName)?.GetValue(Model)?.ToString();
                        <InputText ValueExpression="ValueExpression<string>(property.PropertyName)"
                           Value="@((string)value)"
                                   ValueChanged=@((string v)=>Change(v,property.PropertyName)) class="form-control" />
                }
                
                @if (property.PropertyType == "System.DateOnly")
                {
                    var value = (DateOnly) @Model.GetType().GetProperty(property.PropertyName)?.GetValue(Model);

                    <InputDate Type=InputDateType.Date ValueExpression="ValueExpression<DateOnly>(property.PropertyName)"
                           Value="@((DateOnly)value)"
                           ValueChanged=@((DateOnly v)=>Change(v,property.PropertyName)) class="form-control" />
                }
                @if (property.PropertyType == "System.TimeOnly")
                {
                    var value =  (TimeOnly)@Model.GetType().GetProperty(property.PropertyName)?.GetValue(Model);

                <InputDate Type=InputDateType.Time ValueExpression="ValueExpression<TimeOnly>(property.PropertyName)"
                           Value="@((TimeOnly)value)"
                           ValueChanged=@((TimeOnly v)=>Change(v,property.PropertyName)) class="form-control" />
                }

            

            </div>

    }
    <div class="btn-group-lg">
        <input type="submit" value="Save" class="btn btn-success" />
        <input type="reset" value="Clear" class="btn btn-warning" />
    </div>
        
</EditForm>
 

@code {
    [Parameter]
    public TModel? Model { get; set; }
    public List<string>? Captions { get; set; } = new List<string>();
    public List<PropertyMetadata>? PropertyInfoList { get; set; } = new List<PropertyMetadata>();

    protected override void OnInitialized()
    {

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        foreach (var property in Model.GetType().GetProperties())
        {
            Captions.Add(property.Name);
            PropertyInfoList?.Add(new PropertyMetadata() { PropertyName = property.Name, PropertyType = property.PropertyType.ToString() });
        }
        base.OnParametersSet();
    }

    void Change(object val, string pname)
    {
        var type = val.GetType();


        if (val.GetType() == typeof(System.Int32))
        {
            Model?.GetType()?.GetProperty(pname)?.SetValue(Model, Convert.ToInt32(val));
        }
        if(val.GetType() == typeof(System.String))
        {
            Model?.GetType()?.GetProperty(pname)?.SetValue(Model, val);
        }
        if (val.GetType() == typeof(System.DateOnly))
        {
            Model?.GetType()?.GetProperty(pname)?.SetValue(Model, val);
        }
        if (val.GetType() == typeof(System.TimeOnly))
        {
            Model?.GetType()?.GetProperty(pname)?.SetValue(Model, val);
        }

        var v = Model;

    }

    private Expression<Func<PropertyType>> ValueExpression<PropertyType>(string pname)
    {
        var expConstant = Expression.Constant(Model);
        var expression = Expression.Property(expConstant, pname);
        return Expression.Lambda<Func<PropertyType>>(expression);
    }


    void Save()
    {
        js.InvokeVoidAsync("alert", JsonSerializer.Serialize(Model));
    }

    
}

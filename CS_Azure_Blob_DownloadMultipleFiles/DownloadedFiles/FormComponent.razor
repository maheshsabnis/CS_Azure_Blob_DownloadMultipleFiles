@using System.Dynamic
@using System.Reflection
@using System.Text.Json
@using Blazor_EditableTable.Model
@using System.ComponentModel
@using System.Linq.Expressions
@inject IJSRuntime js
@typeparam TModel

@* @if (shouldRender)
{ *@
    <EditForm Model="@Model" OnValidSubmit="Save">
        @foreach (PropertyMetadata property in PropertyInfoList)
        {
            <div class="form-group">
                <label>@property.PropertyName</label>


                @if (property.PropertyType == "System.Int32")
                {
                    var value = Convert.ToInt32(@Model.GetType().GetProperty(property.PropertyName)?.GetValue(Model));

                    <InputNumber ValueExpression="ValueExpression<int>(property.PropertyName)"  
                    Value="@((int)value)"
                    ValueChanged=@((int v)=>Change(v,property.PropertyName)) class="form-control" />
                }
                @if (property.PropertyType == "System.String")
                {
                    var value = @Model.GetType().GetProperty(property.PropertyName)?.GetValue(Model)?.ToString();
                    <InputText ValueExpression="ValueExpression<string>(property.PropertyName)"
                    Value="@((string)value)"
                    ValueChanged=@((string v)=>Change(v,property.PropertyName)) class="form-control" />
                }

                @if (property.PropertyType == "System.DateOnly")
                {
                    var value = (DateOnly)@Model.GetType().GetProperty(property.PropertyName)?.GetValue(Model);

                    <InputDate Type=InputDateType.Date ValueExpression="ValueExpression<DateOnly>(property.PropertyName)"
                    Value="@((DateOnly)value)"
                    ValueChanged=@((DateOnly v)=>Change(v,property.PropertyName)) class="form-control" />
                }
                @if (property.PropertyType == "System.TimeOnly")
                {
                    var value = (TimeOnly)@Model.GetType().GetProperty(property.PropertyName)?.GetValue(Model);

                    <InputDate Type=InputDateType.Time ValueExpression="ValueExpression<TimeOnly>(property.PropertyName)"
                    Value="@((TimeOnly)value)"
                    ValueChanged=@((TimeOnly v)=>Change(v,property.PropertyName)) class="form-control" />
                }

            </div>
        }
        <div class="btn-group-lg">
            <input type="submit" value="Save" class="btn btn-success" />
            <input type="reset" value="Clear" class="btn btn-warning" />
        </div>

    </EditForm>
@* } *@

@code {
    [Parameter]
    public TModel? Model { get; set; }
    public List<string>? Captions { get; set; } = new List<string>();
    public List<PropertyMetadata>? PropertyInfoList { get; set; } = new List<PropertyMetadata>();
    private bool shouldRender = true;
    int counter = 0;
    [Parameter]
    public EventCallback<TModel> onSave { get; set; }

    protected override void OnInitialized()
    {
        foreach (var property in Model.GetType().GetProperties())
        {
            Captions.Add(property.Name);
            PropertyInfoList?.Add(new PropertyMetadata() { PropertyName = property.Name, PropertyType = property.PropertyType.ToString() });
        }
        base.OnInitialized();
    }


   

    void Change(object val, string pname)
    {
        var type = val.GetType();

        if (val.GetType() == typeof(System.Int32))
        {
            Model?.GetType()?.GetProperty(pname)?.SetValue(Model, Convert.ToInt32(val));
        }
        if(val.GetType() == typeof(System.String))
        {
            Model?.GetType()?.GetProperty(pname)?.SetValue(Model, val);
        }
        if (val.GetType() == typeof(System.DateOnly))
        {
            Model?.GetType()?.GetProperty(pname)?.SetValue(Model, val);
        }
        if (val.GetType() == typeof(System.TimeOnly))
        {
            Model?.GetType()?.GetProperty(pname)?.SetValue(Model, val);
        }

        var v = Model;

    }

    private Expression<Func<PropertyType>> ValueExpression<PropertyType>(string pname)
    {
        var expConstant = Expression.Constant(Model);
        var expression = Expression.Property(expConstant, pname);
        return Expression.Lambda<Func<PropertyType>>(expression);
    }


    async void Save()
    {
        // js.InvokeVoidAsync("alert", JsonSerializer.Serialize(Model));
        await onSave.InvokeAsync(Model);
       // shouldRender = false;
    }
    // protected override bool ShouldRender()
    // {
    //     counter = counter + 1;
    //     return shouldRender;
    // }

    
}
